# .github/workflows/deploy.yml
name: Deploy

on:
  workflow_run:
    workflows: ["Continuous Deployment"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging') }}
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set image tag
      id: set-tag
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
          echo "IMAGE_TAG=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        else
          echo "IMAGE_TAG=sha-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        fi
    
    - name: Deploy to staging environment
      run: |
        echo "Deploying version $IMAGE_TAG to staging environment"
        # Replace with actual deployment commands (e.g., kubectl, terraform, AWS CLI)
        # Example:
        # aws ecs update-service --cluster staging-cluster --service insurance-api --force-new-deployment
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging environment"
        # Add actual smoke test commands here
    
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: ${{ success() && (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production') }}
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set image tag
      id: set-tag
      run: |
        if [ -n "${{ github.event.inputs.version }}" ]; then
          echo "IMAGE_TAG=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        else
          echo "IMAGE_TAG=sha-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        fi
    
    - name: Deploy to production environment
      run: |
        echo "Deploying version $IMAGE_TAG to production environment"
        # Replace with actual deployment commands
        # Example:
        # aws ecs update-service --cluster production-cluster --service insurance-api --force-new-deployment
    
    - name: Verify deployment
      run: |
        echo "Verifying production deployment"
        # Add verification steps here